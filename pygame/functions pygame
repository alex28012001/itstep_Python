window = pygame.display.set_mode((1000, 600))  -  создает окно 1000 на 600

pygame.display.set_caption("Игра 1.0") - название окна 

screen = pygame.Surface((1000, 600)) - создание кокого либо обьекта(игровой экран)

screen.fill((50, 50, 50)) - цвет обьекта (игрового экрана)


done = True
while done :
    for e in pygame.event.get():    -   событие закрытия окна
        if e.type == pygame.QUIT:
            done = False


window.blit(screen, (0, 0)) - начало отрисовки обьекта (игрового экрана)

pygame.display.flip() - показывает окно

pygame.time.delay(25) - замедляет действия в окне

myimage = pygame.image.load("krest.png").convert() - создание обьекта(картинки,картинку надо загружать там где исполняемый файл)

myimage = pygame.transform.scale(myimage, (100, 100)) - конвертация картинки

-----------------------------------------------------------------------------------------------------------------------
ball = pygame.image.load("ball.png").convert_alpha() - конвертация картинки с прозрачным фоном (png)
-----------------------------------------------------------------------------------------------------------------------



 def Intersect(x1, x2, y1, y2):
    if (x1 > x2-70) and (x1 < x2 + 200) and (y1 > y2-70) and (y1 < y2+30):
        return 1
    else:
        return 0          -         функция при которой обьекты сталькиваються и отпружиниваються друг от друга
      EE ПРИМЕР:
      
          if Intersect(ball_x, panel_x, ball_y, panel_y) == True:
            ball_down = False

            ball_down = True
       
       
   
        
        
        
 
 while done:
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            done = False

        if e.type == pygame.KEYDOWN:         -      ВЗАИМОДЕЙСТВИЕ ОБЬЕКТА С КЛАВИФТУРОЙ

            if e.key == pygame.K_LEFT:
                if hero_x > 0:
                    hero_x -= 1
                    
                    
                    
pygame.key.set_repeat(1, 1)  -  продолжает движение обьекта  

------------------------------------------------------------------------------------------------------------------------

Шрифты

pygame.font.init() - загрузка модуля для шрифтов

speed_font = pygame.font.SysFont("Buxton Sketch", 50) - задает шрифт и размер текста

inf_font = pygame.font.SysFont("Buxton Sketch", 50) - задает шрифт и размер текста


----------------------------------------------------------------------------------------------------------------------------


Строка состояния

info_string.blit(speed_font.render('Cкорость мяча: '+str(ball_step), 5, (255, 99, 71)), (5, 3))
                        =
info_string.blit(speed_font.render('Cкорость мяча: '  -  отрисовка на верху текст "Скорость мяча" заданным шрифтом в speed_font и размером ,

5 - сглаживание текста

(255, 99, 71)) - цвет этого текста

(5, 3) - координаты этого текста

+str(ball_step) - счётчик скоости мяча 



------------------------------------------------------------------------------------------------
МЕНЮ

class Menu:
    def __init__(self, punkts = [120, 140, 'Punkt', (250, 250, 30), (50, 30, 50)]):
        self.punkts = punkts
    def render (self, poverhnost, font, num_punkt):
        for i in self.punkts:
            if num_punkt == i[5]:
                poverhnost.blit(font.render(i[2], 1, i[4]), (i[0], i[1]-60))

            else:
                poverhnost.blit(font.render(i[2], 1, i[3]), (i[0], i[1]-60))

    def menu (self):
        done = True
        font_menu = pygame.font.SysFont("Buxton Sketch", 100)

        pygame.key.set_repeat(0, 0)
        pygame.mouse.set_visible(True)

        punkt = 0
        while done:
            info_string.fill((119, 136, 153))
            screen.fill((119, 136, 153))

            mp = pygame.mouse.get_pos()
            for i in self.punkts:
                if mp [0]>i[0] and mp[0]<i[0]+200 and mp[1]>i[1] and mp[1]<i[1]+100:
                    punkt = i[5]
            self.render(screen, font_menu , punkt)


            for e in pygame.event.get():
                if e.type == pygame.QUIT:
                    sys.exit()
                if e.type == pygame.KEYDOWN:
                    if e.key == pygame.K_ESCAPE:
                        sys.exit()

                    if e.key == pygame.K_UP:
                        if punkt >0:
                            punkt -=1

                    if e.key == pygame.K_DOWN:
                        if punkt < len(self.punkts)-1:
                            punkt +=1

                if e.type == pygame.MOUSEBUTTONDOWN and e.button == 1:
                    if punkt == 0:
                        done = False
                    elif punkt == 1:
                        sys.exit()

            window.blit(info_string, (0, 0))
            window.blit(screen, (0, 60))
            pygame.display.flip()


"""создаем меню"""
punkts = [(500, 160, 'Game', (250, 250, 30), (0, 0, 0), 0),
          (500, 260, 'Quit', (250, 250, 30), (0, 0, 0), 1),
          (500, 360, '2 game', (250, 250, 30), (0, 0, 0), 2)]



game = Menu(punkts)
game.menu()


----------------------------------------------------------------------------------------------------------------------------
Платформер


level = [
    '----------------',
    '-              -',
    '-              -',
    '-              -',
    '-    --        -',
    '-              -',          -    шаблон уровня
    '-              -',
    '-        --    -',
    '-              -',
    '-              -',
    '-              -',
    '----------------']
    
    
 def make_level(level, platform):
    x = 0
    y = 0
    for row in level:
        for col in row:
            if col == '-':
                screen.blit(platform.img, (x, y))    -   функция создания уровня
            x +=40
        y += 40
        x = 0
        
      
      
      
stena = pygame.image.load("stena.jpg").convert()
stena = pygame.transform.scale(stena, (40, 40))

 class Platform:
    def __init__(self):      -       класс для отрисовки блоков
        self.img = stena
              
pl = Platform()
        
       
    make_level(level, pl)      -      отрисовка уровня
  
     
                        
        
        
                      
               
               
        
        
        
        
        
        










